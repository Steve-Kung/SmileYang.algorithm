精髓：总是选择当前局部最优解
用贪心算法的题必须满足：
1.一次性：某个状态以后的过程不会影响以前的状态，只与当前状态有关。
2.局部最优集合能得到全局最优。
例子：
1.求最小生成树的Prim算法和Kruskal算法都是漂亮的贪心算法。
2.分饼干，任务调度器等区间调度问题（算一次性资源分配吗？）
3.背包问题
4.跳跃游戏，环绕加油站等判断是否能循环问题
思路：
从问题的某一初始解出发；
    while （到达目标边界）
    {
         if(该阶段的状态满足最优条件)加入此局部最优解；
          进入下一阶段；
    }
    return 由所有解元素组合成问题的一个可行解；
跳跃游戏结果：
    执行用时 :
    1 ms
    , 在所有 java 提交中击败了
    100.00%
    的用户
    内存消耗 :
    40.7 MB
    , 在所有 java 提交中击败了
    82.22%
    的用户